9.1 Write a statement that displays the address of the variable count.

cout << &count;

9.2 Write the denition statement for a variable fltPtr. The variable should be a pointer to a float.

float *fltPtr;

9.3 List three uses of the * symbol in C++.

Multiplication operator, pointer definition, and indirection operator.

9.4 What is the output of the following code?
int x = 50, y = 60, z = 70;
int *ptr;
cout << x << " " << y << " " << z << endl;
ptr = &x;
*ptr *= 10;
ptr = &y;
*ptr *= 5;
ptr = &z;
*ptr *= 2;
cout << x << " " << y << " " << z << endl;

50 60 70
500 300 140

9.5 Rewrite the following loop so it uses pointer notation (with the indirection operator)
instead of subscript notation.
for (int x = 0; x < 100; x++)
 cout << arr[x] << endl;
 
 for (int x = 0; x < 100; x++)
  cout << *(arr + x) << endl
  
  9.6 Assume ptr is a pointer to an int, and holds the address 12000. On a system
with 4-byte integers, what address will be in ptr after the following statement?
ptr += 10;

12040


9.7 Assume pint is a pointer variable. Is each of the following statements valid or
invalid? If any is invalid, why?
A) pint++;    --> Valid
B) --pint;    --> Valid
C) pint /= 2; --> Invalid. Only addition and subtraction are valid arithmetic operations with pointers.
D) pint *= 4; --> Invalid. Only addition and subtraction are valid arithmetic operations with pointers.
E) pint += x; // Assume x is an int. --> Valid


9.8 Is each of the following de nitions valid or invalid? If any is invalid, why?
A) int ivar;
int *iptr = &ivar;

--> Valid 

B) int ivar, *iptr = &ivar;
--> Valid
C) float fvar;
int *iptr = &fvar;
--> Invalid. fvar is a float and iptr is a pointer to an int.
D) int nums[50], *iptr = nums;
-->Valid

E) int *iptr = &ivar;
int ivar;

-->Invalid. ivar must be declared before iptr.
